plugins {
    id 'java' // or 'groovy' Must be explicitly applied
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

def forks = Math.max(1, (int) (Runtime.runtime.availableProcessors() / 2))

integrationTest {
    minHeapSize = "512m"
    maxParallelForks = forks
    forkEvery = 1

    testLogging {
        showExceptions = true
        showCauses = true
        showStackTraces = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

dependencies {
    compile project(":com.gcplot.model")
    compile project(":com.gcplot.api")
    compile project(":com.gcplot.commons")
    compile project(":com.gcplot.gc-model")
    compile project(":com.gcplot.log-processor")

    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-codegen:$vertxVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"
    compile "io.dropwizard.metrics:metrics-core:$metricsVersion"
    compile "io.dropwizard.metrics:metrics-graphite:$metricsVersion"
    compile "com.beust:jcommander:$jcommanderVersion"
    compile "commons-codec:commons-codec:$apacheCodecVersion"
    compile "org.apache.commons:commons-email:$apacheMailVersion"

    testCompile "org.springframework:spring-test:$springVersion"
    integrationTestCompile 'com.github.kirviq:dumbster:1.7'
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}